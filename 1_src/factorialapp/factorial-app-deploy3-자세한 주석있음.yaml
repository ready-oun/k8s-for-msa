apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-factorial-app
  namespace: factorial
spec:
  replicas: 2
  ######## 02.업데이트 전략 추가 - start ########
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  ######## 02.업데이트 전략 추가 - end ########
  selector:
    matchLabels:
      app: factorial-app
  template:
    metadata:
      labels:
        app: factorial-app
    spec:
      ######## 03.graceful shutdown 추가 - start ########
      terminationGracePeriodSeconds: 60
      ######## 03.graceful shutdown - end ########
      containers:
        - name: factorial
          image: readyoun/factorial-app-for-k8s:0.0.3
      ######## 04.lifecycle hook 추가 - start ########
          lifecycle:
            preStop: # 컨테이너가 종료( 계획적인 의도에 따른 종료, 예. rollingupdate 등 )
                     # 될 때 실행되는 hook
              exec:
                # 10 초 정도 sleep 한 후에 애플리케이션에 종료 신호를 보내도록 함.
                command: ["/bin/sh", "-c", "sleep 10"]
      ######## 04.lifecycle hook 추가 - end ########
      ######## 05.probe 추가 - start ########
          startupProbe:
            httpGet: # 다른 check 하는 방법 중에서 httpGet 을 가장 많이 사용됨
              path: /probe/startup # application 의 설정된 endPoint( GetMapping 됨 )
              port: 8080
            # initialDelaySeconds : application 이 실행되기 까지의 평균적인 시간
            initialDelaySeconds: 15
            # periodSeconds : startupProbe 의 체크하는 주기
            #                 보통은 1초 단위로 체크하는 경우가 많음.
            #                 1 초가 민감하다고 판단되는 늘리면 됨. 예, 1초 -> 3초 로
            periodSeconds: 1
            # failureThreshold : 15초(initialDelaySeconds) 후 부터 1초(periodSeconds)
            #                    마다 startupProbe 를 check 를 하는데,
            #                    몇 번까지 실패를 받아줄 수 있는지를 결정

            #                    따라서, 15초 지나서 1초 마다 probe를 체크를 하니까,
            #                    25초 내에는 애플리케이션이 실행 되어야 함을 의미함
            #                    ( initialDelaySeconds + failureThreadhold * periodSeconds )
            #                    그리고, 25초 내에 실행이 되지 못하면,
            #                    이 애플리케이션 컨테이너는 재시작( restartPolicy )하게
            #                    된다는 의미임
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /probe/ready  # readinessProbe 의 application 의 설정된 endPoint
                                  # ( GetMapping 됨 )
              port: 8080
            # initialDelaySeconds : initialDelaySeconds 는 컨테이너가 시작되고 기다린 시간임
            #                       startupProbe check 가 끝날때 까지 기다리는 시간이 아님

            #                       15 에서 45 로 설정한다면,
            #                       정상적으로 startupProbe check 가 15초에 끝나고,
            #                       readinessProbe 체크는 30초 후에 시작하게 됨.
            #                       30초 = 45 - 15(startupProbe.initialDelaySeconds)

            #                       그래서, 현재는 15초 로 설정되어 있으니,
            #                       readinessProbe 체크를 바로 시작하기 위해서,
            #                       startupProbe.initialDelaySeconds 와 동일하게 설정함
            initialDelaySeconds: 15
            periodSeconds: 1
            # successThreshold :    연속으로 몇 번 성공해야 K8S 클러스터 네트워크에 접속시킬
            #                       건지 여부를 설정
            #                       현재는 2로 설정되어 있어, 2번 연속으로 성공하면
            #                       K8S 클러스터 네트워크에 접속시켜준다면 의미
            #                       ( endpointSlice 에 포함시킨다는 의미 )
            successThreshold: 2
            # failureThreshold :    readinessProbe 는 민감하게 설정하는 편이 좋기 때문에
            #                       3 정도로 설정해서, 3 번만 연속으로 실패하면
            #                       네트워크에서 끊어버리게 설정한다는 의미
            #                       ( endpointSlice 에 제외시킨다는 의미 )
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /probe/live  # livenessProbe 의 application 의 설정된 endPoint
                                 # ( GetMapping 됨 )
              port: 8080
            # initialDelaySeconds : 15로 설정되어 있어,
            #                       startupProbe 체크가 끝나면 바로 이어서
            #                       livenessProbe 체크를 시작하도록 하기 위함
            initialDelaySeconds: 15
            periodSeconds: 1
            # failureThreshold :    readinessProbe 보다 둔감하게 설정하는 편이
            #                       전체적인 설정에서 맥락이 맞는 편이라고 할 수 있음.

            #                       readinessProbe 가 3 번 연속으로 실패했을 때
            #                       네트워크에서 끊어지도록 설정했으니,
            #                       7 정도록 설정하는 것이 맞는 설정이라고 할 수 있음.

            #                       7 번 모두 실패하면 컨테이너가 재시작하기 때문에
            #                       이 값을 너무 낮게 하면 컨테이너가 너무 자주 재시작하게
            #                       될 수 있기 때문임
            failureThreshold: 3
      ######## 05.probe 추가 - end ########
# kubectl apply -f factorial-app-deploy3.yaml
# kubectl -n factorial get pods
# kubectl -n factorial describe pod pid-id