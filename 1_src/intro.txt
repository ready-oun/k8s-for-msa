
       ###################### factorial-app start ######################

1. 실습 환경 설정 - Ingress 설정
   1.1 kind.sigs.k8s.io 에 접속
   1.2 User Guide > Ingress 페이지로 이동
   1.3 기존 클러스터 삭제
       지금 까지 실습한 객체들이 모두 삭제가 됨.
   1.4 Ingress 설치 및 설정
       자세한 실행 관련 명령어는 아래의 파일의 하단부의 내용을 참조
       kind-cluster-config-for-ingress.yaml

2. K8S 에서의 통신
   - pod 내에서 컨테이너 간 통신
   - 서로 다른 pod 에 있는 컨테이너 간 통신
   - Service 를 이용한 애플리케이션(spring boot) 간 통신
     서비스( ClusterIP, ExternalName ) 객체
     서비스명으로 통신이 가능해짐.

     => Ingress 설치

3. spring boot jib plugin in
   java image build -> doker hub
   K8S Deployment 객체 생성해서, pod 로 만들어서 사용

4. pod(container) 의 update 전략 추가
   factorial-app-deploy2.yaml

5. spring boot 프로젝트에
   5.1 probe 설정
       GetMapping 설정
   5.2 factorial() 메소드
       GetMapping 설정
   5.3 jib build
       0.0.1 -> 0.0.2 로 변경
   5.4 Deployment 객체 생성
       0.0.2 image 사용
   5.5 Pod 의 0.0.2 image 버전 확인 & running 상태
       kubectl -n factorial get pods
       kubectl -n factorial describe pod POD_ID
   5.6 GetMapping test
       kubectl -n factorial exec -it POD_ID -- bash

       curl localhost:8080/factorial?=10
       curl localhost:8080/factorial?=-1

       curl localhost:8080/probe/startup
       curl localhost:8080/probe/ready
       curl localhost:8080/probe/live

6. graceful shutdown       
   6.1 yaml
       terminationGracePeriodSeconds 설정 추가

       보통은 30 초가 꽤 쓸만하지만, 설정하지 않으면 30초지만,
       실습을 위해서 60 으로 설정
   6.2 spring boot
       server:
            shutdown: graceful
        
        application 이 SIGTERM 신호를 받게 되면, 작업을 정리하고
        SIGKILL 신호가 오기 전에 먼저 종료가 되면,
        자연스럽게(graceful) 종료가 됨.
        SIGTERM 신호를 받게 되면, 더 이상 API 요청을 받지 않는
        상태가 됨.
 
        spring:
        lifecycle:
            timeout-per-shutdown-phase: 50

        기본적으로 spring 도 30초가 지나고 나서도
        작업이 정리가 되지 않으면 강제로 스스로 종료를 해버림.
        그런데, 여기 60 초로 설정을 했고,
        ( yaml terminationGracePeriodSeconds: 60 )
        실제로 spring application 에 주어진 시간은
        10 초 정도 sleep 한 후에 애플리케이션 종료 신호를 보내기 때문에
        60초에서 10초를 제외한 50초로 설정

        10 초 정도 에 대한 설정은 yaml 파일의
        "04.lifecycle hook 추가" 에 대한 내용임.



7. Probe 추가
   factorial-app-deploy3.yaml

   Probe : 
     K8S 가 Pod 정확하게는 Container 의 상태를 알아내기 위한 수단.

     K8S 가 container 의 상태를 확인하고 문제가 있을 경우에는
     재시작을 시켜주거나 하는 작업을 자동으로 해줌.

     Probe 가 없다면, K8S 는 단순히 컨테이너의 프로세스가 살았는지
     죽었는지에 대한 정보만으로만 컨테이너 재시작과 같은 작업을 해주게 됨.

     애플리케이션이 비정상적으로 동작한다던지 느려진다던지, 서서히
     머춰버린다던지 등등의 이런 경우를 K8S 의 Probe 를 사용하지 않는다면
     K8S의 핵심 기능을 사용하지 않고 있는것이라고 할 수 있음.

   Probe 종류에 대한 간단한 설명 : 
     startupProbe : 
        다른 Probe 를 실행할지 말지를 결정하는 Check Probe 임.

     readinessProbe : 
        컨테이너를 K8S 클러스터의 네트워크에 연결해서 
        트래픽을 전달을 받을 지 아니면,
        네트워크에서 분리를 할 지를 결정하는 Check Probe 임.

     livenessProbe : 
        컨테이너가 정상인지 비정상인지 여부를 Check Probe 임.

   Probe 종류에 대한 상세 설명 : 
     startupProbe : 
        다른 Probe 를 실행할지 말지를 결정하는 Check Probe 임.

        startupProbe 실행이 성공이 되어야만, readinessProbe 나
        livenessProbe check 가 시작된다고 할 수 있음.

        그래서, startupProbe 는 컨테이너가 기동이 되었을 때,
        먼저 주기적으로 컨테이너의 상태를 체크하고,
        컨테이너의 애플리케이션이 준비가 완료되었을 때,
        그 때 부터 다른 Probe 를 실행시켜주는 역할을 함.

        설정 옵션으로 periodSeconds, failureThreadhold 가 있는데,
        failureThreadhold 에 설정된 횟수 이상을 실패했을 경우,
        K8S 는 이 애플리케이션이 초기화가 정상적으로 되지 않았다고
        기동하다가 문제가 발생했었다고 판단하고, container 를
        restart policy 에 지정된 정책으로 재시작을 시켜버리거나
        종료를 시켜버리게 됨.

        그래서, 
        initialDelaySeconds + failureThreadhold * periodSeconds
        의 계산 결과 시간내에는 container 애플리케이션이 충분히
        기동이 될 수 있도록 해야함.

        보통은 이 수 치를 꽤 넉넉하게 설정해서 사용.
        애플리케이션이 30초가 초기화에 걸린다고 한다면 startupProbe 에서
        실패하는 기준은 60초 정도로 설정해주는 경우도 있음.

     readinessProbe : 
        컨테이너를 K8S 클러스터의 네트워크에 연결해서 
        트래픽을 전달을 받을 지 아니면,
        네트워크에서 분리를 할 지를 결정하는 Check Probe 임.

        기술적으로 이야기 한다면, 해당 Pod 를 EndpointSlice 에
        추가할 지 뺄지 여부를 판단하는데 사용된다고 생각하면 됨.

        만약에 컨테이너 중 하나가 readinessProbe check 에 실패했다면,
        해당 Pod 는 모든 컨테이너가 모두 ready 상태에 도달하기 전 까지는
        EndpointSlice 에 잠시 빠지고 트래픽 분배를 받지 않는 상태가 됨.

        Porbe 중에서 유일하게 successThreadhold 를 설정할 수 있음.
        다른 Probe 는 successThreadhold 가 무조건 한 번만 성공하면
        성공으로 판단하는데, readinessProbe 는 몇 번을 연속으로 check 해서
        성공을 해야지 K8S의 네트워크 클러스터로  연결해줄지 여부를 제어해줄 수
        있음.

        그리고, 애플리케이션 실행 중이더라도 트래픽을 정상적으로 처리해
        줄 수 있는지 여부를 계속해서 체크하는데, 만약에 트래픽을 정상적으로
        처리핼 줄 수 없는 상태라면 해당 Pod 를 EndpointSlice 에서 제외하고,
        다만, 제외하기 전에 받았던 트래픽에 대해서는 처리해주도록 함.

        그래서, 이렇게 EndpointSlice 에 제외된 상태라도,
        계속해서 readinessProbe check 를 수행해서 기준에 들어오면 다시
        EndpointSlice 에 포함시켜서 트래픽을 받을 수 있도록 함.


     livenessProbe : 
        컨테이너가 정상인지 비정상인지 여부를 Check Probe 임.

        성공이면 별다른 동작을 하지 않지만, 실패를 했을 경우는
        컨테이너를 재시작시킴.

        무한 loop 에 빠졌거나, dead lock 에 걸려 아무것도 하지 못하는
        상태의 애플리케이션에 대해서는 강제로 종료시키고, 다시
        시작시켜서 그 상황을 해소시키는 역할을 한다고 보면 됨.

        그래서, 애플리케이션 동작중에 livenessProbe check 에서의
        실패한 경우는 그 시점부터 컨테이너가 종료 절차에 들어가게 되고,
        더 이상 Probe 체크를 하지 않게 됨.

        그래서, livenessProbe 는 서비스가 전체적으로 가용성을 높게 가져갈 수 
        있도록 해주는 반면, 실패로 재시작과 Probe 체크를 처음부터 수행함으로
        서비스에 꽤 많은 부담을 주는 것이다라고도 할 수 있음.

   Probe 설정 고려 사항 : 
     - readinessProbe 는 livenessProbe 에 비해 보통 더 민감하게 설정
     - 컨테이너의 재시작이 서비스에 어떤 영향을 주는지 고려해서 결정해야 함.
     - Probe 설정에 따라 배포에 걸리는 시간도 달라짐.
     - Probe 체크는 컨테이너 내부의 프로세스에 한정해야 하며
       부담이 가는 동작이 아니어야 함.


       ###################### factorial-app end ######################


       ###################### factorial-cache-app start ######################
8. factorial-cache-app 관련 구현

K8S 의 ConfigMap, Secret 객체 적용
       - ConfigMap : 다국어지원
       - Secret : 명령형으로 생성
                  api-key 용으로 사용

         kubectl -n factorial create secret generic factorial-secret --from-literal=api-key=abcd-1234-5678

         kubectl -n factorial get secret
K8S 의 Service 객체 적용
       - factorial-cache-app
         Ingerss 객체에서 factorial-cache-app service
       - factorial-cache-app 에서 factorial-app 을 참조 service 생성
         this message from factorial-app

K8S 의 Ingerss 객체 적용
       - postman 에서 api 사용



       ###################### factorial-cache-app end ######################


9. factorial-app 과 factorial-cache-app 연결 구현
   9.1 두 application 간 연결
       - factorial-app 의 K8S 의 service 객체 구현 및 적용
       
   9.2 factorial-app 의 factorial 계산 서비스 구현
       - java 에서 restClient 구현
         9.1 에서 적용된 service 객체 활용
              
             factorial-app-service:8080 사용해야 함.
             => K8S 기반의 MSA 를 시작해볼려고 함.
             => 서비스 분할을 어떻게 할 것인가?

   9.3 factorial-cache-app 에서 
       factorial-app 의 factorial 계산 서비스 사용
       => 9.2 에서 구현된 기능을 사용하는 서비스 구현
       => 구현된 서비스를 controller 에 사용

   9.4 jib 실행해서 docker repository 에 push 함.

       - factorial-app
         버전으로 0.0.3 -> 0.0.4 로 변경.
         변경 대상 파일은 아래의 두 파일임.

         build.gradle
         factorial-app-deploy3.yaml

       - factorial-cache-app
         버전으로 0.0.3 -> 0.0.4 로 변경.
         변경 대상 파일은 아래의 두 파일임.
         
         build.gradle
         factorial-cache-app-deploy.yaml

   9.5 두 app 에 대해서 deployment 재적용.
       - 각 pod의 container 의 버전이 0.0.4 인지 확인.

   9.6 postman 으로 테스트
       아래의 3가지 케이스에 대해서 테스트
       http://localhost/factorial/10
       http://localhost/factorial/11
       localhost/factorial/11?key=abcd-1234-5678

10. 03_microservice_final 프로젝트의 K8S 이행 작업 1

   03_microservice_final 프로젝트 GitHub 주소
   https://github.com/jongyeonsim2/Megazone2024_Docker_K8S/tree/master/03_microservice_final

   기존에는 Docker 를 활용한 Container 기반의 웹 애플리케이션.
   => Container 로 실행될 이미지까지는 작성이 됨.

   K8S 클러스터 기반의 웹 애플리케이션으로 이행.

   최종적으로는 postman으로 REST API 테스트가 되도록 이행하면 됨.

   - 어렵다고 생각된다면.
     문제점 리스트 작성 후 하나씩 해결해나가면 됨.

   - 단, 수업시간은 엄수!!!!

   - 이행 작업을 완료하면 작업 완료 메일 전송.
     메일 주소 :   diversim90@naver.com
     제목 :       [메가존클라우드] K8S 이행 과제 - 홍길동
     제출 결과물 : 이행 작업과 관련된 결과물을 하나의 폴더에 저장해서
                  폴더 통째로 압축해서 제출

                  파일명은 "K8S이행과제 - 홍길동.zip"

                  폴더의 구성은 아래와 같음

                  K8S_Migration
                    - src
                    - cli_src
                    - test_result

                  1. src 폴더
                     자바 관련 프로젝트 등
                  2. cli_src 폴더
                     K8S 의 명령형 코드
                  3. test_result 폴더
                     Rest API 별 테스트 결과 캡쳐 화면을
                     간단한 보고서 형식으로 작성
                     단, 테스트 항목별로 구분할 것
 
     첨부 파일 :  K8S이행과제 - 홍길동.zip
     내용 :       작성하지 않아도 됨

11. 03_microservice_final 프로젝트의 K8S 이행 작업 2

    목적 : 메가존클라우드 최종 합격
           현실 : 수료인원의 50%( 전공자, 비전공자 )
                  메가존클라우드 관계사( 5:5 )

           Cloud + K8S + Java 개발 => 대용량 서비스
           (EKS, ECS)

           1. 자바 개발
           2. 운영
           3. 개선

    어제 과제 : config-server, eureka-server, gateway-server, item-service : docker 기반
              K8S + config-server + item-service + H2/MySql : 배운데로 마이그레이션 함.
              잘 했음. 단, 모두 동일함.

    오늘 과제 : config-server, eureka-server, gateway-server, item-service 별도의 서버로 운영.
               K8S + H2/MySql + factorial/factorial-cach-eapp

               - Postman 으로 통신
               - 시스템 아키텍처
                 pod 까지 작성해서, 통신흐름이 보이도록 작성.
               - 시스템 아키텍처 에 대한 설명
               - 완료 한 부분
                 기본상태 : K8S + config-server + item-service + H2/MySql
                 추가된 부분 : 

    사이드 프로젝트 : EKS 로 migration + Postman 으로 통신
                     ECS 로 migration + Postman 으로 통신

    사이드 프로젝트 : 주제를 선정해서 진행 + MSA + 카프카 관련의 이벤트 처리


   - 2번째 이행 작업을 완료하면 작업 완료 메일 전송.
     메일 주소 :   diversim90@naver.com
     제목 :       [메가존클라우드] K8S 이행 과제 2 - 본인 이름
     제출 결과물 : 이행 작업과 관련된 결과물을 하나의 폴더에 저장해서
                  폴더 통째로 압축해서 제출

                  파일명은 "K8S이행과제 2 - 본인 이름.zip"

                  폴더의 구성은 아래와 같음

                  K8S_Migration
                    - src
                    - cli_src
                    - test_result
                    - report

                  1. src 폴더
                     자바 관련 프로젝트 등
                  2. cli_src 폴더
                     K8S 의 명령형, 선언형 코드 등
                  3. test_result 폴더
                     Rest API 별 테스트 결과 캡쳐 화면을 간단한 보고서 형식으로 작성

                     아래의 항목으로 크게 나누고,
                     각 항목에서 세분화한 테스트 결과를 작성

                     - 물품 관리( item-service )
                     - factorial-cache-app

                  4. report 폴더
                     시스템 아키텍처 구성과 관련된 문서
                     - 시스템 아키텍처 구성도 및 설계 배경에 대한 설명
                     - 이번 과제를 통해 느낀 점
                       기술, 학습, 고민 등에 대해 자유롭게 작성.

     첨부 파일 :  K8S이행과제 2 - 본인 이름.zip
     내용 :       아래의 예시를 참고하여 본인이 완료한 내용을 작성
 
                    완료 리스트
                    1. eureka-server, gateway-server 구현
                    2. factorial/factorial-cach-eapp 구현
                    3. Postman 으로 통신 테스트
                       - 물품 관리( item-service )
                       - factorial-cache-app
                    4. 시스템 아키텍처 구성도
                    5. 시스템 아키텍처 에 대한 설명

